#
# Basic nginx reverse proxy configuration for CTFPad + hedgedoc + whiteboard
#
# This configuration will use nginx as a HTTPS reverse-proxy
# - CTFPad   (8443 -> 8000)
# - HedgeDoc (8443 -> 3000)
# - Whiteboard (8443 -> 3001)
#

worker_processes 10;

events {
  worker_connections 1024;
}

http {

    ssl_protocols               TLSv1.1 TLSv1.2;
    ssl_ecdh_curve              secp384r1;
    ssl_ciphers                 "ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384 OLD_TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 OLD_TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256";
    ssl_prefer_server_ciphers   on;
    ssl_session_timeout         10m;
    ssl_session_cache           shared:SSL:10m;
    ssl_session_tickets         off;
    client_max_body_size        4G;


    #
    # CTFPad
    #
    upstream app_ctfpad_server {
        server ctfpad:8000;
    }

    server {
        listen              8443 ssl;
        server_name         ctfpad.mydomain.com;
        ssl_certificate     /etc/nginx/certs/ctfpad.mydomain.com/fullchain.pem; # store letsencrypt keys there
        ssl_certificate_key /etc/nginx/certs/ctfpad.mydomain.com/privkey.pem;   # store letsencrypt keys there

        location / {
            proxy_pass http://app_ctfpad_server;
            proxy_redirect off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Host $server_name;
        }
    }


    map $http_upgrade $connection_upgrade {
            default upgrade;
            ''      close;
    }


    #
    # HedgeDoc
    # Doc: https://github.com/hedgedoc/hedgedoc/blob/develop/docs/content/setup/reverse-proxy.md
    #
    upstream app_hedgedoc_server {
        server hedgedoc:3000;
    }

    server {
        listen              8443 ssl;
        server_name         hedgedoc.mydomain.com;
        ssl_certificate     /etc/nginx/certs/ctfpad.mydomain.com/fullchain.pem; # store letsencrypt keys there
        ssl_certificate_key /etc/nginx/certs/ctfpad.mydomain.com/privkey.pem;   # store letsencrypt keys there

        location / {
            proxy_pass http://app_hedgedoc_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /socket.io/ {
            proxy_pass http://app_hedgedoc_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
        }
    }


    #
    # Whiteboard
    # Doc: https://github.com/cracker0dks/whiteboard#nginx-reverse-proxy-configuration
    #
    upstream app_whiteboard_server {
        server whiteboard:3001;
    }


    server {
        listen              8443 ssl;
        server_name         whiteboard.mydomain.com;
        ssl_certificate     /etc/nginx/certs/ctfpad.mydomain.com/fullchain.pem; # store letsencrypt keys there
        ssl_certificate_key /etc/nginx/certs/ctfpad.mydomain.com/privkey.pem;   # store letsencrypt keys there

        location / {
            proxy_pass http://app_whiteboard_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}
